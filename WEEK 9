#complete function to implement coin change making problem i.e. finding the minimum number of coins of certain denominations that add up to given amount of money.The only available coins are of values 1, 2, 3, 4
def coinChange(n):
    coins = [1, 2, 3, 4]
    dp = [float('inf')] * (n + 1)
    dp[0] = 0 
    for i in range(1, n + 1):
        for coin in coins:
            if i - coin >= 0:
                dp[i] = min(dp[i], dp[i - coin] + 1)
    return dp[n]
def main():
    try:
        amount = int(input().strip())
        result = coinChange(amount)
        print(result)
    except EOFError:
        print(end="")

main()

#An e-commerce company plans to give their customers a special discount for Christmas.They are planning to offer a flat discount. The discount value is calculated as the sum of all the prime digits in the total bill amount. Write an algorithm to find the discount value for the given total bill amount.
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def sum_prime_digits(orderValue):
    total_discount = 0
    for digit in str(orderValue):
        if is_prime(int(digit)):
            total_discount += int(digit)
    return total_discount

def christmasDiscount(n):
    return sum_prime_digits(n)

if __name__ == "__main__":
    try:
        n = int(input())
        print(christmasDiscount(n))
    except EOFError:
        print(end="")
#An abundant number is a number for which the sum of its proper divisors is greater than the number itself. Proper divisors of the number are those that are strictly lesser than the number.
def abundant(number):
    divisors_sum = sum([i for i in range(1, number) if number % i == 0])

    if divisors_sum > number:
        return "Yes"
    else:
        return "No"

def main():
    try:
        number = int(input().strip())
        print(abundant(number))
    except EOFError:
        print(end="")
    except ValueError:
        print(end="")
main()

#A number is considered to be ugly if its only prime factors are 2, 3 or 5.
def checkUgly(n):
    if n <= 0:
        return "not ugly"
    
    while n % 2 == 0:
        n /= 2
    while n % 3 == 0:
        n /= 3
    while n % 5 == 0:
        n /= 5
    
    if n == 1:
        return "ugly"
    else:
        return "not ugly"

def main():
    try:
        n = int(input().strip())
        print(checkUgly(n))
    except EOFError:
        print(end="")
    except ValueError:
        print(end="")

if __name__ == "__main__":
    main()
